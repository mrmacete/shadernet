<?xml version="1.0" encoding="ISO-8859-1"?><?hnb pos="42"?>
<!-- generated by hnb 1.9.18 (http://hnb.sourceforge.net) -->

<!DOCTYPE tree[
	<!ELEMENT tree (node*)>
	<!ELEMENT data (#PCDATA)> <!-- (max 4096 bytes long) -->
	<!ELEMENT node (data?,node*)>
	<!ATTLIST node done (yes|no) #IMPLIED
	          type CDATA #IMPLIED
	>]>

<tree>
<node><data>requirements</data>
	<node><data>high level description of what shader should do</data>
		<node><data>xml or other</data></node>
		<node><data>building blocks ( nodes? )</data></node>
		<node><data>network capable</data></node>
		<node><data>cache and encryption</data></node>
	</node>
	<node><data>runtime shader code generation</data>
		<node><data>building blocks are read from files</data></node>
		<node><data>merging different files</data></node>
		<node><data>files contains functions and structures</data></node>
		<node><data>building blocks should be declared at runtime</data></node>
		<node><data>extensibility</data></node>
	</node>
	<node><data>automatic code optimization</data>
		<node><data>unrolling functions to better merge blocks</data></node>
		<node><data>minimizing GPU memory usage</data></node>
		<node><data>early discarding</data></node>
		<node><data>minimizing uniform parameters</data></node>
	</node>
	<node><data>compose time shader validation</data>
		<node><data>using OpenGLCompiler</data></node>
	</node>
	<node><data>small</data>
		<node><data>written in c, modular</data></node>
		<node><data>keep it simple</data></node>
	</node>
	<node><data>fast</data>
		<node><data>written in c</data></node>
		<node><data>massive use of threads</data></node>
	</node>
	<node><data>modular</data>
		<node><data>architecture should be a pipeline of pluggable modules</data></node>
		<node><data>modules can be threads or processes</data></node>
	</node>
	<node><data>it is a portable library</data>
		<node><data>machine independency</data>
			<node><data>x86 and CELL</data></node>
			<node><data>linux, windows, mac</data></node>
		</node>
		<node><data>C++ API</data></node>
		<node><data>python API</data></node>
		<node><data>Java API</data></node>
	</node>
</node>
<node><data>technologies</data>
	<node><data>xml parsing</data>
		<node><data>expat</data></node>
	</node>
	<node><data>threads</data>
		<node><data>pthread</data></node>
	</node>
	<node><data>network HTTP layer</data>
		<node><data>tiny http_lib</data></node>
	</node>
</node>
<node><data>architecture</data>
	<node><data>general concepts</data>
		<node><data>events</data>
			<node><data>events are structures dispatched through callbacks</data></node>
		</node>
		<node><data>TAP</data>
			<node><data>it is a &quot;hole&quot; through which application can inspect data while it is flowing</data></node>
			<node><data>an application &quot;subscribes&quot; to one or more taps and then receives appropriate &quot;tap events&quot;</data></node>
			<node><data>a &quot;tap event&quot; contains a description of which tap is the source of the event and a pointer to the data itself</data></node>
			<node><data>the receiver of the tap event can change the data before routing it forward</data></node>
			<node><data>this can be used to implement plugin chains</data></node>
		</node>
		<node><data>building block</data>
			<node><data>it is a piece of relocatable source code, in form of string of human readable characters</data></node>
			<node><data>it carries metadata to describe how that piece of code should be connected to others ( input, outputs, description )</data></node>
			<node><data>all this information is packed into an XML document</data></node>
			<node><data>it can use and refer other building blocks, to create higher level blocks</data></node>
		</node>
	</node>
	<node><data>description reader</data>
		<node><data>core</data></node>
		<node><data>building blocks retrieval</data>
			<node><data>building blocks can be stored on the local file system or somewhere on the network</data></node>
			<node><data>they are located using their URIs</data></node>
			<node><data>a cache is handy to abstract blocks locations and to save network traffic</data></node>
			<node><data>tap events are generated before the new block is copied into the cache and when some block comes out from the cache</data></node>
		</node>
	</node>
</node>
</tree>
